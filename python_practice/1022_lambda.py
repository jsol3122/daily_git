# 람다 식 ( !=람다함수 ) --------------------------------------------------------------------
L = []
for k in range(10):
    L.append(k)
print(L)
print()

# 위의 식을 람다식으로 변환
print( [ k for k in range(10) ] )
print('-'*30)

# ------------------------------------------------------------------------------------------
L = []
for k in range(10):
    L.append(k*k)
print(L)
print()

# 위의 식을 람다식으로 변환
print( [ k*k for k in range(10) ] )
print('-'*30)

# ------------------------------------------------------------------------------------------
L =[]
for k in range(10):             # c언어를 따라가므로 결과값이 0이면 거짓, 그 외엔 참
    if k%2:                     # if문에서 0나오면 거짓, 그 외엔 참인 식
        L.append(k*k)
print(L)
print()

# 위의 식을 람다식으로 변환
print( [ k*k for k in range(10) if k%2 ] )
print('-'*30)

# ------------------------------------------------------------------------------------------
seq1 = 'abc'
seq2 = (1, 2, 3)
L = []
for x in seq1:                                      # 결과를 tuple형식으로 출력
    for y in seq2:
        L.append((x,y))
print(L)
print()

# 위의 식을 람다식으로 변환
print( [ (x,y) for x in seq1 for y in seq2 ] )      # 다중for문은 연속해서 적어줌
print('-'*30)

# 람다함수 ( !=람다 식 ) --------------------------------------------------------------------
# 구현부
def square(x):
    return x**2

# 호출부
print(square(5))

# 위의 함수를 람다함수 사용하여 표현 - 방식 1
# 구현부
square2 = lambda x : x**2

# 호출부
print(square2(5))

# 위의 함수를 람다함수 사용하여 표현 - 방식 2(매개변수를 구현부에 넣고, 바로 변수 square3에 넣기)
square3 = (lambda x: x**2)(5)
print(square3)

# 위의 함수를 람다함수 사용하여 표현 - 방식 3(함수명 없이 바로 출력)
print( (lambda x: x**2)(5) )

print('-'*30)

# ------------------------------------------------------------------------------------------
def test():
    print('test')
    return
test()

# 위의 함수를 람다함수 사용하여 표현
test2 = lambda : print('test')
test2()

print('-'*30)

# 람다함수 예제 -----------------------------------------------------------------------------
# [ 문제 1 ] 1~5까지의 제곱 구하기
lst = ([ k**2 for k in range(1, 6)])
print(lst)

lst2 = [ (lambda k: k**2)(i) for i in range(1, 6)]
print(lst2)

# [ 문제 2 ] 함수(f)와 람다함수(f2) 만들기
# [ 조건 ] x + 2*y + 5*z 의 연산결과 리턴
# 함수 이용
def f(x,y,z):
    return x + 2*y + 5*z
print(f(1,2,3))

# 람다함수 이용 - 1
print( (lambda x,y,z: x + 2*y + 5*z)(1,2,3) )
# 람다함수 이용 - 2
f2 = (lambda x,y,z: x + 2*y + 5*z)
print(f2(1,2,3))







